#include "directory_shard.h"

#include <mock_api.h>

namespace {
  i::Cid wikipedia_root_cid = i::Cid{"bafybeiaysi4s6lnjev27ln5icwm6tueaw2vdykrtjkwiphwekaywqhcjze"};
  i::ByteView wikipedia_root_block();
  struct DirShardTest : public ::testing::Test {
    std::shared_ptr<MockApi> api = std::make_shared<MockApi>();
    ii::NodePtr p = ii::DagNode::fromBytes(api, wikipedia_root_cid, wikipedia_root_block());
    ii::DirShard* t() {
      return dynamic_cast<ii::DirShard*>(p.get());
    }
  };
  ii::NodePtr notfound(std::string const&){return {};}
}

TEST_F(DirShardTest, ConstructingFromKnownBlockGivesCorrectType) {
  EXPECT_TRUE(t());
}

TEST_F(DirShardTest, ListingGivesExpectedJson) {
  ii::ResolutionState rs{i::SlashDelimited{}, i::ResponseSemantic::Listing, notfound};
  auto result = p->Resolve(rs);
  EXPECT_TRUE(std::holds_alternative<i::Response>(result));
  auto resp = std::get<i::Response>(result);
  EXPECT_EQ(resp.mime_, "application/json");
#if HAS_JSON_CBOR_ADAPTER
  auto j = nlohmann::json::parse(resp.body_);
  std::string_view tn{ j.type_name() };
  EXPECT_EQ(tn, "object"sv) << tn;
  EXPECT_EQ(j.size(), 11UL);
#endif
}

namespace {
  i::ByteView wikipedia_root_block() {
    static std::array<std::uint8_t,664> bytes {
      0x12, 0x30, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20, 0x5f, 0xb5, 0x91, 0x82,
      0x96, 0xaa, 0x8f, 0xee, 0xa6, 0x95, 0xf9, 0x7f, 0xec, 0x23, 0xf7, 0x6e,
      0xb2, 0xa3, 0xe1, 0xde, 0xbc, 0xe8, 0xa4, 0xfb, 0xb7, 0xe7, 0x2c, 0x04,
      0x21, 0x91, 0x7c, 0x29, 0x12, 0x03, 0x30, 0x43, 0x2d, 0x18, 0x8f, 0x9e,
      0x8d, 0x01, 0x12, 0x3b, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20, 0xa7, 0x5c,
      0x9b, 0xf0, 0xdf, 0xdb, 0x58, 0x11, 0xaa, 0x0a, 0x7b, 0xca, 0xdb, 0xfb,
      0xc7, 0xb7, 0xf0, 0xd1, 0xde, 0x1d, 0x1d, 0xd0, 0xae, 0x50, 0x62, 0xb4,
      0xea, 0xbc, 0x58, 0x7f, 0x3e, 0xd4, 0x12, 0x0d, 0x31, 0x44, 0x5f, 0x65,
      0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xad, 0x86,
      0x99, 0xba, 0x42, 0x12, 0x3b, 0x0a, 0x24, 0x01, 0x55, 0x12, 0x20, 0x0f,
      0x09, 0x83, 0x21, 0x7b, 0xb7, 0x2c, 0x73, 0x9f, 0x4f, 0x6a, 0x89, 0xe6,
      0xbf, 0x9a, 0xa5, 0x4b, 0xb8, 0xf6, 0x79, 0xb7, 0x6a, 0x8d, 0x5b, 0xe4,
      0xaa, 0x9e, 0x7d, 0xa7, 0x9e, 0x56, 0xa4, 0x12, 0x11, 0x32, 0x35, 0x7a,
      0x69, 0x6d, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
      0x6f, 0x6e, 0x18, 0x0e, 0x12, 0x52, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20,
      0x2a, 0xcd, 0x8b, 0xb2, 0x95, 0x7c, 0xe6, 0x0a, 0x44, 0xf8, 0x0a, 0xe7,
      0x11, 0xf0, 0x2f, 0x1f, 0x88, 0x79, 0x41, 0x9f, 0x3d, 0x98, 0x24, 0xa8,
      0x90, 0x82, 0xfc, 0x08, 0xc6, 0x5b, 0xa9, 0x45, 0x12, 0x23, 0x34, 0x30,
      0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x6e,
      0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x5f, 0x32, 0x30,
      0x32, 0x31, 0x2d, 0x30, 0x32, 0x2e, 0x7a, 0x69, 0x6d, 0x18, 0x9d, 0xbd,
      0xfa, 0xed, 0xc4, 0x02, 0x12, 0x32, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20,
      0x34, 0x56, 0xd1, 0x51, 0xc9, 0x59, 0x92, 0x87, 0x99, 0xea, 0x34, 0xf7,
      0xab, 0x0c, 0x08, 0xa4, 0xc3, 0x78, 0x54, 0x65, 0x4f, 0x12, 0x18, 0xb1,
      0x6c, 0xfa, 0x2f, 0xbf, 0xa2, 0xd2, 0xaa, 0x3a, 0x12, 0x03, 0x34, 0x33,
      0x49, 0x18, 0xe6, 0x8e, 0xf0, 0xec, 0xa1, 0x01, 0x12, 0x35, 0x0a, 0x24,
      0x01, 0x70, 0x12, 0x20, 0xed, 0xd1, 0x7e, 0xb3, 0xd1, 0x87, 0xe1, 0xa2,
      0x8c, 0xaa, 0x48, 0xd1, 0x57, 0xad, 0xec, 0x58, 0x96, 0x60, 0x01, 0xa9,
      0xbc, 0xd7, 0x1f, 0x34, 0x81, 0x25, 0x23, 0x70, 0xa7, 0xc8, 0x08, 0xb7,
      0x12, 0x06, 0x35, 0x38, 0x77, 0x69, 0x6b, 0x69, 0x18, 0xca, 0xf7, 0xe7,
      0xf9, 0xf9, 0x05, 0x12, 0x2e, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20, 0xfb,
      0xda, 0x26, 0x02, 0x5d, 0xb6, 0x9a, 0x0f, 0x48, 0x7a, 0x4b, 0x84, 0x18,
      0xd0, 0x0d, 0xe8, 0x82, 0x37, 0xe9, 0xe5, 0x3a, 0x3a, 0x91, 0x67, 0x19,
      0x5c, 0x10, 0x8d, 0x96, 0x46, 0x01, 0xde, 0x12, 0x03, 0x39, 0x32, 0x4d,
      0x18, 0xc5, 0x08, 0x12, 0x31, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20, 0x37,
      0xad, 0xcd, 0xda, 0x37, 0xfc, 0x6d, 0x34, 0x09, 0xac, 0x33, 0x8a, 0xcf,
      0xfe, 0xb1, 0x93, 0x3d, 0x56, 0xbe, 0x4a, 0x6a, 0x42, 0x01, 0xd9, 0x7a,
      0x19, 0x2b, 0xf7, 0x29, 0x49, 0x61, 0x8a, 0x12, 0x03, 0x39, 0x41, 0x58,
      0x18, 0xa7, 0xf1, 0xb1, 0x80, 0x10, 0x12, 0x37, 0x0a, 0x24, 0x01, 0x55,
      0x12, 0x20, 0x51, 0xed, 0xbc, 0x8d, 0x17, 0x6c, 0xf7, 0xb8, 0x0d, 0x15,
      0xab, 0xe5, 0x4f, 0x33, 0x6e, 0x5e, 0x19, 0xce, 0xaf, 0x37, 0xa7, 0x89,
      0x76, 0x68, 0x64, 0x45, 0xfd, 0x7a, 0x1a, 0x78, 0x3f, 0x99, 0x12, 0x0c,
      0x41, 0x30, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
      0x18, 0xa9, 0x01, 0x12, 0x38, 0x0a, 0x24, 0x01, 0x55, 0x12, 0x20, 0x4b,
      0xef, 0x3f, 0xba, 0x6c, 0xdd, 0x16, 0x97, 0xbe, 0x37, 0xae, 0x3f, 0x67,
      0x19, 0xbc, 0xb3, 0xef, 0x88, 0xff, 0x30, 0x30, 0xaf, 0x7e, 0x02, 0x97,
      0x26, 0x51, 0x5e, 0xf1, 0x22, 0x65, 0x5f, 0x12, 0x0d, 0x43, 0x46, 0x66,
      0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x18, 0xe0,
      0x26, 0x12, 0x2e, 0x0a, 0x24, 0x01, 0x70, 0x12, 0x20, 0xf2, 0xf6, 0x71,
      0xcc, 0xaf, 0x2c, 0x20, 0xce, 0x72, 0x28, 0xbe, 0x05, 0xa8, 0x36, 0x90,
      0x0b, 0x54, 0x86, 0x5a, 0xd4, 0xd8, 0xa3, 0xfa, 0x45, 0x09, 0xd8, 0x82,
      0x58, 0x62, 0x58, 0xf5, 0x79, 0x12, 0x03, 0x44, 0x45, 0x77, 0x18, 0x83,
      0x01, 0x0a, 0x25, 0x08, 0x05, 0x12, 0x1c, 0x40, 0x00, 0x80, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x10, 0x00, 0x28,
      0x22, 0x30, 0x80, 0x02
    };
    auto p = reinterpret_cast<i::Byte const*>(bytes.data());
    return {p, bytes.size()};
  }
}
