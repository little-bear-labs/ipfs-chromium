diff --git a/content/browser/child_process_security_policy_impl.cc b/content/browser/child_process_security_policy_impl.cc
index 5daf5aba13046..e4824572ca3f9 100644
--- a/content/browser/child_process_security_policy_impl.cc
+++ b/content/browser/child_process_security_policy_impl.cc
@@ -1612,15 +1612,18 @@ CanCommitStatus ChildProcessSecurityPolicyImpl::CanCommitOriginAndUrl(
     int child_id,
     const IsolationContext& isolation_context,
     const UrlInfo& url_info) {
+  LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url;
   // First check whether the URL is allowed to commit, without considering the
   // origin. This involves scheme checks as well as CanAccessDataForOrigin.
   if (base::FeatureList::IsEnabled(
           features::kAdditionalNavigationCommitChecks) &&
       !CanCommitURL(child_id, url_info.url)) {
+    LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url;
     // This enforcement is currently skipped on Android WebView due to crashes.
     // TODO(https://crbug.com/326250356): Diagnose and enable for Android
     // WebView as well.
     if (GetContentClient()->browser()->ShouldEnforceNewCanCommitUrlChecks()) {
+      LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url;
       return CanCommitStatus::CANNOT_COMMIT_URL;
     }
   }
@@ -1629,7 +1632,9 @@ CanCommitStatus ChildProcessSecurityPolicyImpl::CanCommitOriginAndUrl(
   DCHECK(url_info.origin.has_value());
   const url::Origin url_origin =
       url::Origin::Resolve(url_info.url, *url_info.origin);
+  LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url << ' ' << url_origin;
   if (!CanAccessDataForOrigin(child_id, url_origin)) {
+    LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url << ' ' << url_origin;
     // Check for special cases, like blob:null/ and data: URLs, where the
     // origin does not contain information to match against the process lock,
     // but using the whole URL can result in a process lock match.  Note that
@@ -1641,13 +1646,15 @@ CanCommitStatus ChildProcessSecurityPolicyImpl::CanCommitOriginAndUrl(
     const ProcessLock& actual_process_lock = GetProcessLock(child_id);
     if (actual_process_lock == expected_process_lock)
       return CanCommitStatus::CAN_COMMIT_ORIGIN_AND_URL;
-
+    LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url << ' ' << url_origin;
     return CanCommitStatus::CANNOT_COMMIT_URL;
   }
 
   // Finally check the origin on its own.
-  if (!CanAccessDataForOrigin(child_id, *url_info.origin))
+  if (!CanAccessDataForOrigin(child_id, *url_info.origin)) {
+    LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url << ' ' << url_origin;
     return CanCommitStatus::CANNOT_COMMIT_ORIGIN;
+  }
 
   // Ensure that the origin derived from |url| is consistent with |origin|.
   // Note: We can't use origin.IsSameOriginWith() here because opaque origins
@@ -1660,6 +1667,7 @@ CanCommitStatus ChildProcessSecurityPolicyImpl::CanCommitOriginAndUrl(
   if (url_tuple_or_precursor_tuple.IsValid() &&
       origin_tuple_or_precursor_tuple.IsValid() &&
       origin_tuple_or_precursor_tuple != url_tuple_or_precursor_tuple) {
+    LOG(INFO) << "CanCommitOriginAndUrl " << url_info.url << ' ' << url_origin;
     // Allow a WebView specific exception for origins that have a data scheme.
     // WebView converts data: URLs into non-opaque data:// origins which is
     // different than what all other builds do. This causes the consistency
