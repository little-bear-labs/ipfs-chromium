syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package ipfs.ipns;

message IpnsEntry {
  enum ValidityType {
    // setting an EOL says "this record is valid until..."
    EOL = 0;
  }

  // deserialized copy of data[value]
  optional bytes value = 1;

  // legacy field, verify 'signatureV2' instead
  optional bytes signatureV1 = 2;

  // deserialized copies of data[validityType] and data[validity]
  optional ValidityType validityType = 3;
  optional bytes validity = 4;

  // deserialized copy of data[sequence]
  optional uint64 sequence = 5;

  // record TTL in nanoseconds, a deserialized copy of data[ttl]
  optional uint64 ttl = 6;

  // in order for nodes to properly validate a record upon receipt, they need the public
  // key associated with it. For old RSA keys, its easiest if we just send this as part of
  // the record itself. For newer Ed25519 keys, the public key can be embedded in the
  // IPNS Name itself, making this field unnecessary.
  optional bytes pubKey = 7;

  // the signature of the IPNS record
  optional bytes signatureV2 = 8;

  // extensible record data in DAG-CBOR format
  optional bytes data = 9;
}
