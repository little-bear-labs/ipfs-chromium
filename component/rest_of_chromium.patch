diff --git a/base/memory/ref_counted.h b/base/memory/ref_counted.h
index 9ef94d84769df..f70e30748a389 100644
--- a/base/memory/ref_counted.h
+++ b/base/memory/ref_counted.h
@@ -7,6 +7,7 @@
 
 #include <stddef.h>
 
+#include <limits>
 #include <utility>
 
 #include "base/atomic_ref_count.h"
diff --git a/base/threading/thread_local_internal.h b/base/threading/thread_local_internal.h
index ed99410ea8a31..d89d48ba981ab 100644
--- a/base/threading/thread_local_internal.h
+++ b/base/threading/thread_local_internal.h
@@ -30,8 +30,7 @@ class CheckedThreadLocalOwnedPointer {
  public:
   CheckedThreadLocalOwnedPointer() = default;
 
-  CheckedThreadLocalOwnedPointer<T>(const CheckedThreadLocalOwnedPointer<T>&) =
-      delete;
+  CheckedThreadLocalOwnedPointer(const CheckedThreadLocalOwnedPointer&) = delete;
   CheckedThreadLocalOwnedPointer<T>& operator=(
       const CheckedThreadLocalOwnedPointer<T>&) = delete;
 
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 0ac02bfdf8c98..c9564b4fd3915 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -2159,6 +2159,7 @@ static_library("browser") {
     "//components/infobars/content",
     "//components/infobars/core",
     "//components/invalidation/impl",
+    "//components/ipfs",
     "//components/javascript_dialogs",
     "//components/keyed_service/content",
     "//components/language/content/browser",
diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index 3515af3d893d1..e5ca1dfa7c19a 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -215,6 +215,8 @@
 #include "components/error_page/common/localized_error.h"
 #include "components/error_page/content/browser/net_error_auto_reloader.h"
 #include "components/google/core/common/google_switches.h"
+#include "components/ipfs/interceptor.h"
+#include "components/ipfs/url_loader_factory.h"
 #include "components/keep_alive_registry/keep_alive_types.h"
 #include "components/keep_alive_registry/scoped_keep_alive.h"
 #include "components/language/core/browser/pref_names.h"
@@ -5780,13 +5782,17 @@ void ChromeContentBrowserClient::
         int render_frame_id,
         const absl::optional<url::Origin>& request_initiator_origin,
         NonNetworkURLLoaderFactoryMap* factories) {
-#if BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(ENABLE_EXTENSIONS) || \
-    !BUILDFLAG(IS_ANDROID)
   content::RenderFrameHost* frame_host =
       RenderFrameHost::FromID(render_process_id, render_frame_id);
   WebContents* web_contents = WebContents::FromRenderFrameHost(frame_host);
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(ENABLE_EXTENSIONS) || \
-        // !BUILDFLAG(IS_ANDROID)
+  network::mojom::URLLoaderFactory* default_factory = g_browser_process->system_network_context_manager()->GetURLLoaderFactory();
+  ipfs::IpfsURLLoaderFactory::Create(
+    factories,
+    web_contents->GetBrowserContext(),
+    default_factory,
+    GetSystemNetworkContext()
+  );
+
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   if (web_contents) {
@@ -5931,8 +5937,8 @@ std::vector<std::unique_ptr<content::URLLoaderRequestInterceptor>>
 ChromeContentBrowserClient::WillCreateURLLoaderRequestInterceptors(
     content::NavigationUIData* navigation_ui_data,
     int frame_tree_node_id) {
-  std::vector<std::unique_ptr<content::URLLoaderRequestInterceptor>>
-      interceptors;
+  std::vector<std::unique_ptr<content::URLLoaderRequestInterceptor>> interceptors;
+  interceptors.push_back(std::make_unique<ipfs::Interceptor>(g_browser_process->system_network_context_manager()->GetURLLoaderFactory(), GetSystemNetworkContext()));
 #if BUILDFLAG(ENABLE_OFFLINE_PAGES)
   interceptors.push_back(
       std::make_unique<offline_pages::OfflinePageURLLoaderRequestInterceptor>(
diff --git a/chrome/common/chrome_content_client.cc b/chrome/common/chrome_content_client.cc
index db08f6151229e..e63c004ec6398 100644
--- a/chrome/common/chrome_content_client.cc
+++ b/chrome/common/chrome_content_client.cc
@@ -292,6 +292,12 @@ void ChromeContentClient::AddAdditionalSchemes(Schemes* schemes) {
 #if BUILDFLAG(IS_ANDROID)
   schemes->local_schemes.push_back(url::kContentScheme);
 #endif
+  for ( const char* ip_s : {"ipfs", "ipns"} ) {
+    schemes->standard_schemes.push_back(ip_s);
+    schemes->cors_enabled_schemes.push_back(ip_s);
+    schemes->secure_schemes.push_back(ip_s);
+    schemes->csp_bypassing_schemes.push_back(ip_s);
+  }
 }
 
 std::u16string ChromeContentClient::GetLocalizedString(int message_id) {
diff --git a/net/dns/dns_client_unittest.cc b/net/dns/dns_client_unittest.cc
index 6d9dcd3bc325d..a8e21efaf6d82 100644
--- a/net/dns/dns_client_unittest.cc
+++ b/net/dns/dns_client_unittest.cc
@@ -168,237 +168,6 @@ TEST_F(DnsClientTest, RespectsAdditionalTypesDisabled) {
   EXPECT_FALSE(client_->FallbackFromInsecureTransactionPreferred());
 }
 
-TEST_F(DnsClientTest, UnhandledOptions) {
-  client_->SetInsecureEnabled(/*enabled=*/true,
-                              /*additional_types_enabled=*/true);
-  DnsConfig config = ValidConfigWithDoh(false /* doh_only */);
-  config.unhandled_options = true;
-  client_->SetSystemConfig(config);
-
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_TRUE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-  EXPECT_FALSE(client_->CanUseInsecureDnsTransactions());
-  EXPECT_TRUE(client_->FallbackFromInsecureTransactionPreferred());
-
-  DnsConfig expected_config = config;
-  expected_config.nameservers.clear();
-  EXPECT_THAT(client_->GetEffectiveConfig(), testing::Pointee(expected_config));
-  EXPECT_TRUE(client_->GetHosts());
-  EXPECT_TRUE(client_->GetTransactionFactory());
-  EXPECT_EQ(client_->GetCurrentSession()->config(), expected_config);
-}
-
-TEST_F(DnsClientTest, CanUseSecureDnsTransactions_ProbeSuccess) {
-  client_->SetSystemConfig(ValidConfigWithDoh(true /* doh_only */));
-  resolve_context_->InvalidateCachesAndPerSessionData(
-      client_->GetCurrentSession(), true /* network_change */);
-
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_TRUE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-
-  resolve_context_->RecordServerSuccess(0u /* server_index */,
-                                        true /* is_doh_server */,
-                                        client_->GetCurrentSession());
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_FALSE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-}
-
-TEST_F(DnsClientTest, DnsOverTlsActive) {
-  client_->SetInsecureEnabled(/*enabled=*/true,
-                              /*additional_types_enabled=*/true);
-  DnsConfig config = ValidConfigWithDoh(false /* doh_only */);
-  config.dns_over_tls_active = true;
-  client_->SetSystemConfig(config);
-
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_TRUE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-  EXPECT_FALSE(client_->CanUseInsecureDnsTransactions());
-  EXPECT_TRUE(client_->FallbackFromInsecureTransactionPreferred());
-
-  EXPECT_THAT(client_->GetEffectiveConfig(), testing::Pointee(config));
-  EXPECT_TRUE(client_->GetHosts());
-  EXPECT_TRUE(client_->GetTransactionFactory());
-  EXPECT_EQ(client_->GetCurrentSession()->config(), config);
-}
-
-TEST_F(DnsClientTest, AllAllowed) {
-  client_->SetInsecureEnabled(/*enabled=*/true,
-                              /*additional_types_enabled=*/true);
-  client_->SetSystemConfig(ValidConfigWithDoh(false /* doh_only */));
-  resolve_context_->InvalidateCachesAndPerSessionData(
-      client_->GetCurrentSession(), false /* network_change */);
-  resolve_context_->RecordServerSuccess(0u /* server_index */,
-                                        true /* is_doh_server */,
-                                        client_->GetCurrentSession());
-
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_FALSE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-  EXPECT_TRUE(client_->CanUseInsecureDnsTransactions());
-  EXPECT_TRUE(client_->CanQueryAdditionalTypesViaInsecureDns());
-  EXPECT_FALSE(client_->FallbackFromInsecureTransactionPreferred());
-
-  EXPECT_THAT(client_->GetEffectiveConfig(),
-              testing::Pointee(ValidConfigWithDoh(false /* doh_only */)));
-  EXPECT_TRUE(client_->GetHosts());
-  EXPECT_TRUE(client_->GetTransactionFactory());
-  EXPECT_EQ(client_->GetCurrentSession()->config(),
-            ValidConfigWithDoh(false /* doh_only */));
-}
-
-TEST_F(DnsClientTest, FallbackFromInsecureTransactionPreferred_Failures) {
-  client_->SetInsecureEnabled(/*enabled=*/true,
-                              /*additional_types_enabled=*/true);
-  client_->SetSystemConfig(ValidConfigWithDoh(false /* doh_only */));
-
-  for (int i = 0; i < DnsClient::kMaxInsecureFallbackFailures; ++i) {
-    EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-    EXPECT_TRUE(client_->FallbackFromSecureTransactionPreferred(
-        resolve_context_.get()));
-    EXPECT_TRUE(client_->CanUseInsecureDnsTransactions());
-    EXPECT_TRUE(client_->CanQueryAdditionalTypesViaInsecureDns());
-    EXPECT_FALSE(client_->FallbackFromInsecureTransactionPreferred());
-
-    client_->IncrementInsecureFallbackFailures();
-  }
-
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_TRUE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-  EXPECT_TRUE(client_->CanUseInsecureDnsTransactions());
-  EXPECT_TRUE(client_->CanQueryAdditionalTypesViaInsecureDns());
-  EXPECT_TRUE(client_->FallbackFromInsecureTransactionPreferred());
-
-  client_->ClearInsecureFallbackFailures();
-
-  EXPECT_TRUE(client_->CanUseSecureDnsTransactions());
-  EXPECT_TRUE(
-      client_->FallbackFromSecureTransactionPreferred(resolve_context_.get()));
-  EXPECT_TRUE(client_->CanUseInsecureDnsTransactions());
-  EXPECT_TRUE(client_->CanQueryAdditionalTypesViaInsecureDns());
-  EXPECT_FALSE(client_->FallbackFromInsecureTransactionPreferred());
-}
-
-TEST_F(DnsClientTest, GetPresetAddrs) {
-  DnsConfig config;
-  config.doh_config = *net::DnsOverHttpsConfig::FromString(R"(
-    {
-      "servers": [{
-        "template": "https://www.doh.com/",
-        "endpoints": [{
-          "ips": ["4.3.2.1"]
-        }, {
-          "ips": ["4.3.2.2"]
-        }]
-      }]
-    }
-  )");
-  client_->SetSystemConfig(config);
-
-  EXPECT_FALSE(client_->GetPresetAddrs(
-      url::SchemeHostPort("https", "otherdomain.com", 443)));
-  EXPECT_FALSE(
-      client_->GetPresetAddrs(url::SchemeHostPort("http", "www.doh.com", 443)));
-  EXPECT_FALSE(client_->GetPresetAddrs(
-      url::SchemeHostPort("https", "www.doh.com", 9999)));
-
-  std::vector<IPEndPoint> expected({{{4, 3, 2, 1}, 443}, {{4, 3, 2, 2}, 443}});
-
-  EXPECT_THAT(
-      client_->GetPresetAddrs(url::SchemeHostPort("https", "www.doh.com", 443)),
-      testing::Optional(expected));
-}
-
-TEST_F(DnsClientTest, Override) {
-  client_->SetSystemConfig(BasicValidConfig());
-  EXPECT_THAT(client_->GetEffectiveConfig(),
-              testing::Pointee(BasicValidConfig()));
-  EXPECT_EQ(client_->GetCurrentSession()->config(), BasicValidConfig());
-
-  client_->SetConfigOverrides(BasicValidOverrides());
-  EXPECT_THAT(client_->GetEffectiveConfig(),
-              testing::Pointee(
-                  BasicValidOverrides().ApplyOverrides(BasicValidConfig())));
-  EXPECT_EQ(client_->GetCurrentSession()->config(),
-            BasicValidOverrides().ApplyOverrides(BasicValidConfig()));
-
-  client_->SetConfigOverrides(DnsConfigOverrides());
-  EXPECT_THAT(client_->GetEffectiveConfig(),
-              testing::Pointee(BasicValidConfig()));
-  EXPECT_EQ(client_->GetCurrentSession()->config(), BasicValidConfig());
-}
-
-// Cannot apply overrides without a system config unless everything is
-// overridden
-TEST_F(DnsClientTest, OverrideNoConfig) {
-  client_->SetConfigOverrides(BasicValidOverrides());
-  EXPECT_FALSE(client_->GetEffectiveConfig());
-  EXPECT_FALSE(client_->GetCurrentSession());
-
-  auto override_everything =
-      DnsConfigOverrides::CreateOverridingEverythingWithDefaults();
-  override_everything.nameservers.emplace(
-      {IPEndPoint(IPAddress(1, 2, 3, 4), 123)});
-  client_->SetConfigOverrides(override_everything);
-  EXPECT_THAT(
-      client_->GetEffectiveConfig(),
-      testing::Pointee(override_everything.ApplyOverrides(DnsConfig())));
-  EXPECT_EQ(client_->GetCurrentSession()->config(),
-            override_everything.ApplyOverrides(DnsConfig()));
-}
-
-TEST_F(DnsClientTest, OverrideInvalidConfig) {
-  client_->SetSystemConfig(DnsConfig());
-  EXPECT_FALSE(client_->GetEffectiveConfig());
-  EXPECT_FALSE(client_->GetCurrentSession());
-
-  client_->SetConfigOverrides(BasicValidOverrides());
-  EXPECT_THAT(client_->GetEffectiveConfig(),
-              testing::Pointee(
-                  BasicValidOverrides().ApplyOverrides(BasicValidConfig())));
-  EXPECT_EQ(client_->GetCurrentSession()->config(),
-            BasicValidOverrides().ApplyOverrides(DnsConfig()));
-}
-
-TEST_F(DnsClientTest, OverrideToInvalid) {
-  client_->SetSystemConfig(BasicValidConfig());
-  EXPECT_THAT(client_->GetEffectiveConfig(),
-              testing::Pointee(BasicValidConfig()));
-  EXPECT_EQ(client_->GetCurrentSession()->config(), BasicValidConfig());
-
-  DnsConfigOverrides overrides;
-  overrides.nameservers.emplace();
-  client_->SetConfigOverrides(std::move(overrides));
-
-  EXPECT_FALSE(client_->GetEffectiveConfig());
-  EXPECT_FALSE(client_->GetCurrentSession());
-}
-
-TEST_F(DnsClientTest, ReplaceCurrentSession) {
-  client_->SetSystemConfig(BasicValidConfig());
-
-  base::WeakPtr<DnsSession> session_before =
-      client_->GetCurrentSession()->GetWeakPtr();
-  ASSERT_TRUE(session_before);
-
-  client_->ReplaceCurrentSession();
-
-  EXPECT_FALSE(session_before);
-  EXPECT_TRUE(client_->GetCurrentSession());
-}
-
-TEST_F(DnsClientTest, ReplaceCurrentSession_NoSession) {
-  ASSERT_FALSE(client_->GetCurrentSession());
-
-  client_->ReplaceCurrentSession();
-
-  EXPECT_FALSE(client_->GetCurrentSession());
-}
-
 }  // namespace
 
 }  // namespace net
diff --git a/net/dns/dns_config_service_linux.cc b/net/dns/dns_config_service_linux.cc
index 5273da5190277..d95544c64d213 100644
--- a/net/dns/dns_config_service_linux.cc
+++ b/net/dns/dns_config_service_linux.cc
@@ -93,6 +93,9 @@ absl::optional<DnsConfig> ConvertResStateToDnsConfig(
   // cannot be overwritten by /etc/resolv.conf
   const unsigned kRequiredOptions = RES_RECURSE | RES_DEFNAMES | RES_DNSRCH;
   if ((res.options & kRequiredOptions) != kRequiredOptions) {
+    if (!dns_config.unhandled_options) {
+      LOG(ERROR) << "unhandled_options set to true bec " << res.options;
+    }
     dns_config.unhandled_options = true;
     return dns_config;
   }
@@ -206,9 +209,12 @@ void RecordIncompatibleNsswitchReason(
     IncompatibleNsswitchReason reason,
     absl::optional<NsswitchReader::Service> service_token) {
   if (service_token) {
+    LOG(ERROR) << "RecordIncompatibleNsswitchReason(" << static_cast<int>(reason) << ',' << int(service_token.value()) << ')';
     base::UmaHistogramEnumeration(
         "Net.DNS.DnsConfig.Nsswitch.IncompatibleService",
         service_token.value());
+  } else {
+    LOG(ERROR) << "RecordIncompatibleNsswitchReason(" << static_cast<int>(reason) << ",nullopt)";
   }
 }
 
@@ -272,11 +278,11 @@ bool IsNsswitchConfigCompatible(
         // Ignore any entries after `kDns` because Chrome will fallback to the
         // system resolver if a result was not found in DNS.
         return true;
-
+      case NsswitchReader::Service::kResolve:
+        break;
       case NsswitchReader::Service::kMdns:
       case NsswitchReader::Service::kMdns4:
       case NsswitchReader::Service::kMdns6:
-      case NsswitchReader::Service::kResolve:
       case NsswitchReader::Service::kNis:
         RecordIncompatibleNsswitchReason(
             IncompatibleNsswitchReason::kIncompatibleService,
diff --git a/net/dns/dns_config_service_posix.cc b/net/dns/dns_config_service_posix.cc
index a93e7cd74d2a9..bfed2d9e6a157 100644
--- a/net/dns/dns_config_service_posix.cc
+++ b/net/dns/dns_config_service_posix.cc
@@ -283,6 +283,9 @@ absl::optional<DnsConfig> ConvertResStateToDnsConfig(
   // cannot be overwritten by /etc/resolv.conf
   const unsigned kRequiredOptions = RES_RECURSE | RES_DEFNAMES | RES_DNSRCH;
   if ((res.options & kRequiredOptions) != kRequiredOptions) {
+    if (!dns_config.unhandled_options) {
+      LOG(ERROR) << "unhandled_options set to true bec " << res.options;
+    }
     dns_config.unhandled_options = true;
     return dns_config;
   }
diff --git a/net/dns/dns_response_result_extractor.cc b/net/dns/dns_response_result_extractor.cc
index 644b88f9715de..f0d6fb81c8c27 100644
--- a/net/dns/dns_response_result_extractor.cc
+++ b/net/dns/dns_response_result_extractor.cc
@@ -349,7 +349,7 @@ ExtractionError ExtractTxtResults(const DnsResponse& response,
   ExtractionError extraction_error =
       ExtractResponseRecords(response, dns_protocol::kTypeTXT, &records,
                              &response_ttl, nullptr /* out_aliases */);
-
+  LOG(ERROR) << "Err extracting TXT results: " << static_cast<long>(extraction_error);
   if (extraction_error != ExtractionError::kOk) {
     *out_results = HostCache::Entry(ERR_DNS_MALFORMED_RESPONSE,
                                     HostCache::Entry::SOURCE_DNS);
diff --git a/net/dns/dns_session.cc b/net/dns/dns_session.cc
index 351685813aad7..723a0e246323a 100644
--- a/net/dns/dns_session.cc
+++ b/net/dns/dns_session.cc
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 #include "net/dns/dns_session.h"
+#include "base/logging.h"
 
 #include <stdint.h>
 
@@ -23,7 +24,9 @@ DnsSession::DnsSession(const DnsConfig& config,
       rand_callback_(base::BindRepeating(rand_int_callback,
                                          0,
                                          std::numeric_limits<uint16_t>::max())),
-      net_log_(net_log) {}
+      net_log_(net_log) {
+        LOG(INFO) << "(session) config.unhandled_options =" << config.unhandled_options ;
+      }
 
 DnsSession::~DnsSession() = default;
 
diff --git a/net/dns/host_cache.h b/net/dns/host_cache.h
index f077893d071df..10ef0cea2078e 100644
--- a/net/dns/host_cache.h
+++ b/net/dns/host_cache.h
@@ -212,10 +212,16 @@ class NET_EXPORT HostCache {
       aliases_ = std::move(aliases);
     }
     const absl::optional<std::vector<std::string>>& text_records() const {
+      if (text_records_) {
+        LOG(INFO) << " This host entry has " << text_records_.value().size() << " TXT records.";
+      }
       return text_records_;
     }
     void set_text_records(
         absl::optional<std::vector<std::string>> text_records) {
+      if (text_records) {
+        LOG(INFO) << "set_text_records(" << text_records.value().size() << " recs)";
+      }
       text_records_ = std::move(text_records);
     }
     const absl::optional<std::vector<HostPortPair>>& hostnames() const {
@@ -303,6 +309,7 @@ class NET_EXPORT HostCache {
       endpoint_metadatas_ = std::move(endpoint_metadatas);
     }
     void SetResult(std::vector<std::string> text_records) {
+      LOG(INFO) << "SetResult(" << text_records.size() << " recs)";
       text_records_ = std::move(text_records);
     }
     void SetResult(std::vector<HostPortPair> hostnames) {
diff --git a/net/dns/system_dns_config_change_notifier.cc b/net/dns/system_dns_config_change_notifier.cc
index ddff4e00059a5..4a34765da956f 100644
--- a/net/dns/system_dns_config_change_notifier.cc
+++ b/net/dns/system_dns_config_change_notifier.cc
@@ -17,6 +17,7 @@
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/task_traits.h"
 #include "base/task/thread_pool.h"
+#include "base/logging.h"
 #include "net/dns/dns_config_service.h"
 
 namespace net {
@@ -166,8 +167,17 @@ class SystemDnsConfigChangeNotifier::Core {
 
     if (config_ == new_config)
       return;
-
+    if (config_) {
+      LOG(INFO) << "DNS change detected (old) " << config_->unhandled_options;
+    } else {
+      LOG(INFO) << "DNS change detected (old) nullopt";
+    }
     config_ = std::move(new_config);
+    if (config_) {
+      LOG(INFO) << "DNS change detected (new) " << config_->unhandled_options;
+    } else {
+      LOG(INFO) << "DNS change detected (new) nullopt";
+    }
 
     for (auto& wrapped_observer : wrapped_observers_) {
       wrapped_observer.second->OnNotifyThreadsafe(config_);
