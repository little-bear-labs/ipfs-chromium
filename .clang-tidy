# bugprone-unc* takes too long
# misc-include-cleaner finds includes that are directly used, thinks they're not, and removes them breaking code
# readability-else-after-return is oftentimes not more readable
# reability-named-parameter complains about parameters whose names are commented out because they're unused
# readability-qualified-auto can cause iterators (especially into std::array) to be declared as auto* which is both generally wrong, but also causes it to not build when array is defined slightly differently e.g. when the iterator is std::__wrap_iter
  Checks:          'bugpr*,
                    -bugprone-unc*,
                    -bugprone-m*,
                    -bugprone-n*,
                    -bugprone-o*,
                    -bugprone-p*,
                    -bugprone-r*,
                    -bugprone-s*,
                    -bugprone-t*,
                    -bugprone-und*,
                    -bugprone-unh*,
                    -bugprone-uni*,
                    misc-*,
                    -misc-include-cleaner,
                    moder*,
                    reada*,
                    -readability-else-after-return,
                    -readability-named-parameter,
                    -readability-qualified-auto'
  CheckOptions:
    - key:          bugprone-assert-side-effect.AssertMacros
      value:        assert,DCHECK
    - key:          bugprone-dangling-handle.HandleClasses
      value:        ::std::basic_string_view;::std::span;::absl::string_view;::base::BasicStringPiece;::base::span
    - key:          bugprone-string-constructor.StringNames
      value:        ::std::basic_string;::std::basic_string_view;::base::BasicStringPiece;::absl::string_view
    - key:          modernize-use-default-member-init.UseAssignment
      value:        1
    # crbug.com/1342136, crbug.com/1343915: At times, this check makes
    # suggestions that break builds. Safe mode allows us to sidestep that.
    - key:          modernize-use-transparent-functors.SafeMode
      value:        1
    # This relaxes modernize-use-emplace in some cases; we might want to make it
    # more aggressive in the future. See discussion on
    # https://groups.google.com/a/chromium.org/g/cxx/c/noMMTNYiM0w .
    - key:          modernize-use-emplace.IgnoreImplicitConstructors
      value:        1
CompileFlags:
    Add: -Wno-unknown-warning-option
    Remove: -fprofile-abs-path
...
